//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try intern.validate()
  }
  
  /// This `R.color` struct is generated, and contains static references to 1 color palettes.
  struct color {
    /// This `R.color.appColor` struct is generated, and contains static references to 8 colors.
    struct appColor {
      /// <span style='background-color: #175EC8; color: #E8A137; padding: 1px 3px;'>#175EC8</span> darkPrimary
      static let darkPrimary = Rswift.ColorResource(name: "darkPrimary", red: 0.0901960805058479, green: 0.368627458810806, blue: 0.7843137383461, alpha: 1.0)
      /// <span style='background-color: #191919; color: #E6E6E6; padding: 1px 3px;'>#191919</span> primaryText
      static let primaryText = Rswift.ColorResource(name: "primaryText", red: 0.0980392172932625, green: 0.0980392172932625, blue: 0.0980392172932625, alpha: 1.0)
      /// <span style='background-color: #1F80EF; color: #E07F10; padding: 1px 3px;'>#1F80EF</span> primary
      static let primary = Rswift.ColorResource(name: "primary", red: 0.121568627655506, green: 0.501960813999176, blue: 0.937254905700684, alpha: 1.0)
      /// <span style='background-color: #626262; color: #9D9D9D; padding: 1px 3px;'>#626262</span> secondayText
      static let secondayText = Rswift.ColorResource(name: "secondayText", red: 0.384313732385635, green: 0.384313732385635, blue: 0.384313732385635, alpha: 1.0)
      /// <span style='background-color: #AFAFAF; color: #505050; padding: 1px 3px;'>#AFAFAF</span> divider
      static let divider = Rswift.ColorResource(name: "divider", red: 0.686274528503418, green: 0.686274528503418, blue: 0.686274528503418, alpha: 1.0)
      /// <span style='background-color: #AFD5FA; color: #502A05; padding: 1px 3px;'>#AFD5FA</span> lightPrimary
      static let lightPrimary = Rswift.ColorResource(name: "lightPrimary", red: 0.686274528503418, green: 0.835294127464294, blue: 0.980392158031464, alpha: 1.0)
      /// <span style='background-color: #FFEA2E; color: #0015D1; padding: 1px 3px;'>#FFEA2E</span> accent
      static let accent = Rswift.ColorResource(name: "accent", red: 1.0, green: 0.917647063732147, blue: 0.180392161011696, alpha: 1.0)
      /// <span style='background-color: #FFFFFF; color: #000000; padding: 1px 3px;'>#FFFFFF</span> icons
      static let icons = Rswift.ColorResource(name: "icons", red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      
      /// <span style='background-color: #175EC8; color: #E8A137; padding: 1px 3px;'>#175EC8</span> darkPrimary
      /// 
      /// UIColor(red: 0.0901960805058479, green: 0.368627458810806, blue: 0.7843137383461, alpha: 1.0)
      static func darkPrimary(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0901960805058479, green: 0.368627458810806, blue: 0.7843137383461, alpha: 1.0)
      }
      
      /// <span style='background-color: #191919; color: #E6E6E6; padding: 1px 3px;'>#191919</span> primaryText
      /// 
      /// UIColor(red: 0.0980392172932625, green: 0.0980392172932625, blue: 0.0980392172932625, alpha: 1.0)
      static func primaryText(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.0980392172932625, green: 0.0980392172932625, blue: 0.0980392172932625, alpha: 1.0)
      }
      
      /// <span style='background-color: #1F80EF; color: #E07F10; padding: 1px 3px;'>#1F80EF</span> primary
      /// 
      /// UIColor(red: 0.121568627655506, green: 0.501960813999176, blue: 0.937254905700684, alpha: 1.0)
      static func primary(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.121568627655506, green: 0.501960813999176, blue: 0.937254905700684, alpha: 1.0)
      }
      
      /// <span style='background-color: #626262; color: #9D9D9D; padding: 1px 3px;'>#626262</span> secondayText
      /// 
      /// UIColor(red: 0.384313732385635, green: 0.384313732385635, blue: 0.384313732385635, alpha: 1.0)
      static func secondayText(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.384313732385635, green: 0.384313732385635, blue: 0.384313732385635, alpha: 1.0)
      }
      
      /// <span style='background-color: #AFAFAF; color: #505050; padding: 1px 3px;'>#AFAFAF</span> divider
      /// 
      /// UIColor(red: 0.686274528503418, green: 0.686274528503418, blue: 0.686274528503418, alpha: 1.0)
      static func divider(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.686274528503418, green: 0.686274528503418, blue: 0.686274528503418, alpha: 1.0)
      }
      
      /// <span style='background-color: #AFD5FA; color: #502A05; padding: 1px 3px;'>#AFD5FA</span> lightPrimary
      /// 
      /// UIColor(red: 0.686274528503418, green: 0.835294127464294, blue: 0.980392158031464, alpha: 1.0)
      static func lightPrimary(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 0.686274528503418, green: 0.835294127464294, blue: 0.980392158031464, alpha: 1.0)
      }
      
      /// <span style='background-color: #FFEA2E; color: #0015D1; padding: 1px 3px;'>#FFEA2E</span> accent
      /// 
      /// UIColor(red: 1.0, green: 0.917647063732147, blue: 0.180392161011696, alpha: 1.0)
      static func accent(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 0.917647063732147, blue: 0.180392161011696, alpha: 1.0)
      }
      
      /// <span style='background-color: #FFFFFF; color: #000000; padding: 1px 3px;'>#FFFFFF</span> icons
      /// 
      /// UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      static func icons(_: Void = ()) -> UIKit.UIColor {
        return UIKit.UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `App Color.clr`.
    static let appColorClr = Rswift.FileResource(bundle: R.hostingBundle, name: "App Color", pathExtension: "clr")
    
    /// `bundle.url(forResource: "App Color", withExtension: "clr")`
    static func appColorClr(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.appColorClr
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 0 fonts.
  struct font {
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `backArrow1`.
    static let backArrow1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrow1")
    /// Image `backArrowMaskFixed`.
    static let backArrowMaskFixed = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrowMaskFixed")
    /// Image `backArrowMask`.
    static let backArrowMask = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrowMask")
    /// Image `backArrow`.
    static let backArrow = Rswift.ImageResource(bundle: R.hostingBundle, name: "backArrow")
    /// Image `cat`.
    static let cat = Rswift.ImageResource(bundle: R.hostingBundle, name: "cat")
    /// Image `catdog`.
    static let catdog = Rswift.ImageResource(bundle: R.hostingBundle, name: "catdog")
    /// Image `controlBackground`.
    static let controlBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "controlBackground")
    /// Image `controlSelectedBackground`.
    static let controlSelectedBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "controlSelectedBackground")
    /// Image `dog`.
    static let dog = Rswift.ImageResource(bundle: R.hostingBundle, name: "dog")
    /// Image `favorite`.
    static let favorite = Rswift.ImageResource(bundle: R.hostingBundle, name: "favorite")
    /// Image `fewerPaws`.
    static let fewerPaws = Rswift.ImageResource(bundle: R.hostingBundle, name: "fewerPaws")
    /// Image `maximumTrack`.
    static let maximumTrack = Rswift.ImageResource(bundle: R.hostingBundle, name: "maximumTrack")
    /// Image `minimumTrack`.
    static let minimumTrack = Rswift.ImageResource(bundle: R.hostingBundle, name: "minimumTrack")
    /// Image `morePaws`.
    static let morePaws = Rswift.ImageResource(bundle: R.hostingBundle, name: "morePaws")
    /// Image `navBackground`.
    static let navBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "navBackground")
    /// Image `pets`.
    static let pets = Rswift.ImageResource(bundle: R.hostingBundle, name: "pets")
    /// Image `settings`.
    static let settings = Rswift.ImageResource(bundle: R.hostingBundle, name: "settings")
    /// Image `sliderThumb`.
    static let sliderThumb = Rswift.ImageResource(bundle: R.hostingBundle, name: "sliderThumb")
    /// Image `tabBarBackground`.
    static let tabBarBackground = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarBackground")
    /// Image `tabBarSelectionIndicator`.
    static let tabBarSelectionIndicator = Rswift.ImageResource(bundle: R.hostingBundle, name: "tabBarSelectionIndicator")
    
    /// `UIImage(named: "backArrow", bundle: ..., traitCollection: ...)`
    static func backArrow(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backArrow1", bundle: ..., traitCollection: ...)`
    static func backArrow1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrow1, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backArrowMask", bundle: ..., traitCollection: ...)`
    static func backArrowMask(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrowMask, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "backArrowMaskFixed", bundle: ..., traitCollection: ...)`
    static func backArrowMaskFixed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.backArrowMaskFixed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "cat", bundle: ..., traitCollection: ...)`
    static func cat(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.cat, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "catdog", bundle: ..., traitCollection: ...)`
    static func catdog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.catdog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "controlBackground", bundle: ..., traitCollection: ...)`
    static func controlBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.controlBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "controlSelectedBackground", bundle: ..., traitCollection: ...)`
    static func controlSelectedBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.controlSelectedBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "dog", bundle: ..., traitCollection: ...)`
    static func dog(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.dog, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "favorite", bundle: ..., traitCollection: ...)`
    static func favorite(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.favorite, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "fewerPaws", bundle: ..., traitCollection: ...)`
    static func fewerPaws(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.fewerPaws, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "maximumTrack", bundle: ..., traitCollection: ...)`
    static func maximumTrack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.maximumTrack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "minimumTrack", bundle: ..., traitCollection: ...)`
    static func minimumTrack(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.minimumTrack, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "morePaws", bundle: ..., traitCollection: ...)`
    static func morePaws(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.morePaws, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "navBackground", bundle: ..., traitCollection: ...)`
    static func navBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.navBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "pets", bundle: ..., traitCollection: ...)`
    static func pets(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.pets, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "settings", bundle: ..., traitCollection: ...)`
    static func settings(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.settings, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "sliderThumb", bundle: ..., traitCollection: ...)`
    static func sliderThumb(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.sliderThumb, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarBackground", bundle: ..., traitCollection: ...)`
    static func tabBarBackground(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarBackground, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "tabBarSelectionIndicator", bundle: ..., traitCollection: ...)`
    static func tabBarSelectionIndicator(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.tabBarSelectionIndicator, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.nib` struct is generated, and contains static references to 0 nibs.
  struct nib {
    fileprivate init() {}
  }
  
  /// This `R.reuseIdentifier` struct is generated, and contains static references to 3 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `DeviceCell`.
    static let deviceCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "DeviceCell")
    /// Reuse identifier `SystemCellI`.
    static let systemCellI: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "SystemCellI")
    /// Reuse identifier `UserCell`.
    static let userCell: Rswift.ReuseIdentifier<UIKit.UITableViewCell> = Rswift.ReuseIdentifier(identifier: "UserCell")
    
    fileprivate init() {}
  }
  
  /// This `R.segue` struct is generated, and contains static references to 2 view controllers.
  struct segue {
    /// This struct is generated for `ChoseDeviceController`, and contains static references to 1 segues.
    struct choseDeviceController {
      /// Segue identifier `unwindChoseDevice`.
      static let unwindChoseDevice: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, ChoseDeviceController, UIKit.UIViewController> = Rswift.StoryboardSegueIdentifier(identifier: "unwindChoseDevice")
      
      /// Optionally returns a typed version of segue `unwindChoseDevice`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func unwindChoseDevice(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, ChoseDeviceController, UIKit.UIViewController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.choseDeviceController.unwindChoseDevice, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    /// This struct is generated for `DistributionViewController`, and contains static references to 1 segues.
    struct distributionViewController {
      /// Segue identifier `showLogin`.
      static let showLogin: Rswift.StoryboardSegueIdentifier<UIKit.UIStoryboardSegue, DistributionViewController, UIKit.UINavigationController> = Rswift.StoryboardSegueIdentifier(identifier: "showLogin")
      
      /// Optionally returns a typed version of segue `showLogin`.
      /// Returns nil if either the segue identifier, the source, destination, or segue types don't match.
      /// For use inside `prepareForSegue(segue: UIStoryboardSegue, sender: AnyObject?)`.
      static func showLogin(segue: UIKit.UIStoryboardSegue) -> Rswift.TypedStoryboardSegueInfo<UIKit.UIStoryboardSegue, DistributionViewController, UIKit.UINavigationController>? {
        return Rswift.TypedStoryboardSegueInfo(segueIdentifier: R.segue.distributionViewController.showLogin, segue: segue)
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `Account`.
    static let account = _R.storyboard.account()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Login`.
    static let login = _R.storyboard.login()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `Major`.
    static let major = _R.storyboard.major()
    /// Storyboard `Social`.
    static let social = _R.storyboard.social()
    
    /// `UIStoryboard(name: "Account", bundle: ...)`
    static func account(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.account)
    }
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Login", bundle: ...)`
    static func login(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.login)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    /// `UIStoryboard(name: "Major", bundle: ...)`
    static func major(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.major)
    }
    
    /// `UIStoryboard(name: "Social", bundle: ...)`
    static func social(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.social)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 7 localization keys.
    struct localizable {
      /// Base translation: Chose device
      /// 
      /// Locales: Base
      static let id_title_chose_device = Rswift.StringResource(key: "id_title_chose_device", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Kids watch
      /// 
      /// Locales: Base
      static let id_app_name = Rswift.StringResource(key: "id_app_name", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Kids watch2
      /// 
      /// Locales: Base
      static let id_device_type_kids_watch2 = Rswift.StringResource(key: "id_device_type_kids_watch2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Log in
      /// 
      /// Locales: Base
      static let id_title_login = Rswift.StringResource(key: "id_title_login", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: MB12
      /// 
      /// Locales: Base
      static let id_device_type_mb12 = Rswift.StringResource(key: "id_device_type_mb12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: MB22
      /// 
      /// Locales: Base
      static let id_device_type_mb22 = Rswift.StringResource(key: "id_device_type_mb22", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      /// Base translation: Skip
      /// 
      /// Locales: Base
      static let id_baritem_skip = Rswift.StringResource(key: "id_baritem_skip", tableName: "Localizable", bundle: R.hostingBundle, locales: ["Base"], comment: nil)
      
      /// Base translation: Chose device
      /// 
      /// Locales: Base
      static func id_title_chose_device(_: Void = ()) -> String {
        return NSLocalizedString("id_title_chose_device", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Kids watch
      /// 
      /// Locales: Base
      static func id_app_name(_: Void = ()) -> String {
        return NSLocalizedString("id_app_name", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Kids watch2
      /// 
      /// Locales: Base
      static func id_device_type_kids_watch2(_: Void = ()) -> String {
        return NSLocalizedString("id_device_type_kids_watch2", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Log in
      /// 
      /// Locales: Base
      static func id_title_login(_: Void = ()) -> String {
        return NSLocalizedString("id_title_login", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: MB12
      /// 
      /// Locales: Base
      static func id_device_type_mb12(_: Void = ()) -> String {
        return NSLocalizedString("id_device_type_mb12", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: MB22
      /// 
      /// Locales: Base
      static func id_device_type_mb22(_: Void = ()) -> String {
        return NSLocalizedString("id_device_type_mb22", bundle: R.hostingBundle, comment: "")
      }
      
      /// Base translation: Skip
      /// 
      /// Locales: Base
      static func id_baritem_skip(_: Void = ()) -> String {
        return NSLocalizedString("id_baritem_skip", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct nib {
    fileprivate init() {}
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try major.validate()
    }
    
    struct account: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Account"
      
      fileprivate init() {}
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      fileprivate init() {}
    }
    
    struct login: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Login"
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = DistributionViewController
      
      let bundle = R.hostingBundle
      let name = "Main"
      
      fileprivate init() {}
    }
    
    struct major: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = TabsViewController
      
      let bundle = R.hostingBundle
      let name = "Major"
      let navHomeController = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "navHomeController")
      
      func navHomeController(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: navHomeController)
      }
      
      static func validate() throws {
        if _R.storyboard.major().navHomeController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'navHomeController' could not be loaded from storyboard 'Major' as 'UIKit.UINavigationController'.") }
      }
      
      fileprivate init() {}
    }
    
    struct social: Rswift.StoryboardResourceWithInitialControllerType {
      typealias InitialController = UIKit.UINavigationController
      
      let bundle = R.hostingBundle
      let name = "Social"
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}